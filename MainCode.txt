
import cv2
import pickle
import cvzone
import numpy as np
 
# Video feed
cap = cv2.VideoCapture('carPark.mp4') //It will open the video
 
with open('CarParkPos', 'rb') as f:  //It will load the file where the positions are loaded.
    posList = pickle.load(f)
 
width, height = 107, 48
 
 
def checkParkingSpace(imgPro):  
    spaceCounter = 0
 
    for pos in posList:
        x, y = pos
 
        imgCrop = imgPro[y:y + height, x:x + width]   //It will crop the image
        # cv2.imshow(str(x * y), imgCrop)  //It will show all the images that are cropped
        count = cv2.countNonZero(imgCrop)  //It will count how many pixels each of these car spaces has..If it more than there is a car and if it less then there is noi car
 
 
        if count < 900:    //If the pixelcount is less than 900 then the space is empty and we will denote it by green clour
            color = (0, 255, 0) //It will set the colour as green
            thickness = 5  //This is so used so that the space is more visible
            spaceCounter += 1  //It will increase the spacecounter by 1.
        else:                //If the pixelcount is greater than 900 then the space is filled and we will denote it by red clour.
            color = (0, 0, 255)  //It will set the colour as red.
            thickness = 2  
 
        cv2.rectangle(img, pos, (pos[0] + width, pos[1] + height), color, thickness)
        cvzone.putTextRect(img, str(count), (x, y + height - 3), scale=1,   //It will put it in our main image.It will show the values of each oh the cars
                           thickness=2, offset=0, colorR=color)
 
    cvzone.putTextRect(img, f'Free: {spaceCounter}/{len(posList)}', (100, 50), scale=3,  //This will print the number of empty space on the video
                           thickness=5, offset=20, colorR=(0,200,0))  
while True: //While true we will get the frame from our video
    
    //It will loop the video i.e, the video will run continuously
    //It will give the current position     //It will give us the total number of frames present in our video
    if cap.get(cv2.CAP_PROP_POS_FRAMES) == cap.get(cv2.CAP_PROP_FRAME_COUNT):
        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)  //We are resetting the frames if they reach the total amount of frames that the video has 
    success, img = cap.read()  //
    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) //It will convert the coloured image into  a grey image.If the value of the binary image is 0 then the place is empty and if the value is 1 then it means that it is not empty
    imgBlur = cv2.GaussianBlur(imgGray, (3, 3), 1) //It will blur the image
    imgThreshold = cv2.adaptiveThreshold(imgBlur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,   //It will convert the image into a binary image
                                         cv2.THRESH_BINARY_INV, 25, 16)
    imgMedian = cv2.medianBlur(imgThreshold, 5)  
    kernel = np.ones((3, 3), np.uint8)  //It will create the kernel size
    imgDilate = cv2.dilate(imgMedian, kernel, iterations=1)  //By this it will easier to differentiate between empty spaces and when there is a car
 
    checkParkingSpace(imgDilate)
    cv2.imshow("Image", img)  //It will show the image
    # cv2.imshow("ImageBlur", imgBlur)
    # cv2.imshow("ImageThres", imgMedian)
    cv2.waitKey(10) //If we increase the value then it will slow down the video